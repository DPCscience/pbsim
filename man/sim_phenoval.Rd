% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/value_functions.R
\name{sim_phenoval}
\alias{sim_phenoval}
\title{Simulate phenotypic data}
\usage{
sim_phenoval(pop, h2, n.env = 1, n.rep = 1, return.eff = TRUE, ...)
}
\arguments{
\item{pop}{An object of class \code{pop}.}

\item{h2}{The heritability of the trait or traits. May be a numeric vector of 
length 1 (heritability is the same for all traits) or a numeric vector of 
length n_trait.}

\item{n.env}{The number of environments in which to phenotype.}

\item{n.rep}{The number of replicates of each individual in each environment.}

\item{return.eff}{Should the variance components and effects be returned?}

\item{...}{Other arguments. See \code{Details}.}
}
\value{
An object of class \code{pop} with all information in the input \code{pop} object,
plus simulated phenotypes.
}
\description{
Simulates phenotypic observations given the genotypic value of individuals and the 
heritability of a quantitative trait.
}
\details{
Other arguments that can be specified are :
\describe{
  \item{\code{V_E}}{The variance of environmental effects. May be a scalar 
  (V_E is the same for all traits) or a numeric vector of length n_trait. }
  \item{\code{V_R}}{The variance of the residual effects.May be a scalar 
  (V_R is the same for all traits) or a numeric vector of length n_trait. }
}

Environmental effects are drawn from a normal distribution such that \eqn{e ~ N(0, V_E)},
where \code{V_E} is the environmental variance. If \code{V_E} is not provided, it 
is 8 times the genotypic variance. Residual effects are drawn from a normal distribution 
such that \eqn{\epsilon ~ N(0, V_R)}, where \code{V_R} is the residual variance.
If \code{V_R} is not provided, it is calculated from \code{h2}, where

\eqn{V_R = n.rep * n.env * (\frac{Vg}{h2} - Vg)}.
}
\examples{

# Load some historic data
data("s2_cap_genos")
data("s2_snp_info")

# Create a genome with genetic architecture
len <- tapply(s2_snp_info$cM_pos, s2_snp_info$chrom, max)
n_mar <- tapply(s2_snp_info$cM_pos, s2_snp_info$chrom, length)
map <- lapply(split(s2_snp_info, s2_snp_info$chrom), function(chr) structure(chr$cM_pos, names = chr$rs) )

genome <- sim_genome(len = len, n.mar = n_mar, map = map)

# Simulate a a trait with 15 QTL
qtl.model <- matrix(nrow = 15, ncol = 4)

genome <- sim_gen_model(genome, qtl.model, add.dist = "geometric", max.qtl = 15)

pop <- create_pop(genome = genome, geno = s2_cap_genos)

pop <- sim_phenoval(pop = pop, h2 = 0.5)

}
