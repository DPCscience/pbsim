% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pop_functions.R
\name{select_pop}
\alias{select_pop}
\title{Make selections from a population}
\usage{
select_pop(pop, intensity = 0.1, index = 1, type = c("phenotypic",
  "genomic", "random"))
}
\arguments{
\item{pop}{An object of class \code{pop}.}

\item{intensity}{Either the prortion of individual in the population to select
or the number of individuals in the population to select.}

\item{index}{The coefficients for the selection index. Positive coefficients 
equate to selection on higher trait values, and negative coefficients equate 
to selection on lower trait value. Must be a vector if length \code{n_trait}.
If one trait is present, the coefficient is 1 or -1.}

\item{type}{The type of selection to perform. If \code{"phenotypic"}, individuals
in the population are selected based on phenotypic values, if \code{"genomic"}, 
individuals in the population are selected based on predicted genotypic values,
and if \code{"random"}, individuals in the population are selected randomly.}
}
\value{
An object of class \code{pop} that is a subset of the input \code{pop} for
the selections.
}
\description{
Make selections from a population
}
\details{
If one trait is present, selection is performed on that one trait.

If two traits are present, an index is calculated using the index.

If there is a tie in the phenotypic or predicted genotypic values, individuals
are randomly chosen.
}
\examples{

# Simulate a genome
n.mar  <- c(505, 505, 505)
len <- c(120, 130, 140)

genome <- sim_genome(len, n.mar)

# Simulate a quantitative trait influenced by 50 QTL
qtl.model <- matrix(NA, 50, 4)
genome <- sim_gen_model(genome = genome, qtl.model = qtl.model, 
                        add.dist = "geometric", max.qtl = 50)
                        
# Simulate the population
pop <- sim_pop(genome = genome, n.ind = 100)
# Select randomly
select_pop(pop = pop, intensity = 0.1, type = "random")

# Phenotype the population
pop <- sim_phenoval(pop = pop, h2 = 0.5)
# Select on phenotypes
select_pop(pop = pop, intensity = 0.1, type = "phenotypic")

# Predict genotypic values
pop <- pred_geno_val(genome = genome, training.pop = pop, candidate.pop = pop)
# Select on pgvs
select_pop(pop = pop, intensity = 0.1, type = "genomic")


}
