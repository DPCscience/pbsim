% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pop_functions.R
\name{select_pop}
\alias{select_pop}
\title{Make selections from a population}
\usage{
select_pop(pop, intensity = 0.1, index, type = c("phenotypic", "genomic",
  "random"))
}
\arguments{
\item{pop}{An object of class \code{pop}.}

\item{intensity}{Either the prortion of individual in the population to select
or the number of individuals in the population to select.}

\item{index}{The coefficients for the selection index. Positive coefficients 
equate to selection on higher trait values, and negative coefficients equate 
to selection on lower trait value. Must be a vector if length \code{n_trait}.
If one trait is present, the coefficient is 1 or -1.}

\item{type}{The type of selection to perform. If \code{"phenotypic"}, individuals
in the population are selected based on phenotypic values, if \code{"genomic"}, 
individuals in the population are selected based on predicted genotypic values,
and if \code{"random"}, individuals in the population are selected randomly.}
}
\value{
An object of class \code{pop} that is a subset of the input \code{pop} for
the selections.
}
\description{
Make selections from a population
}
\details{
If one trait is present, selection is performed on that one trait.

If two traits are present, an index is calculated using the index.

If there is a tie in the phenotypic or predicted genotypic values, individuals
are randomly chosen.
}
\examples{

# Load some historic data
data("s2_cap_genos")
data("s2_snp_info")

# Create a genome with genetic architecture
len <- tapply(s2_snp_info$cM_pos, s2_snp_info$chrom, max)
n_mar <- tapply(s2_snp_info$cM_pos, s2_snp_info$chrom, length)
map <- lapply(split(s2_snp_info, s2_snp_info$chrom), function(chr) structure(chr$cM_pos, names = chr$rs) )

genome <- sim_genome(len = len, n.mar = n_mar, map = map)

# Simulate a a trait with 15 QTL
qtl.model <- matrix(nrow = 15, ncol = 4)

genome <- sim_gen_model(genome, qtl.model, add.dist = "geometric", max.qtl = 15)

pop <- create_pop(genome = genome, geno = s2_cap_genos)
pop <- sim_phenoval(pop, h2 = 0.5)

pop_selected <- select_pop(pop = pop, intensity = 50, index = 1)

}
